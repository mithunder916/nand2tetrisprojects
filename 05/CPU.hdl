// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=aout, b=inM, sel=instruction[12], out=Insout);

    ALU(x=dout, y=Insout,
        zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8],
        f=instruction[7], no=instruction[6],
        out=aluout, zr=iszero, ng=isneg, out=outM);
    Not(in=isneg, out=notneg);
    Not(in=iszero, out=notzero);
    And(a=notneg, b=notzero, out=ispos);

    Not(in=instruction[15], out=ainstr);
    Or(a=ainstr, b=instruction[5], out=loada);
    Mux16(a=aluout, b=instruction, sel=ainstr, out=foo);
    ARegister(in=foo, load=loada, out=aout, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=loadd);
    DRegister(in=aluout, load=loadd, out=dout);

    And(a=instruction[2], b=isneg, out=jneg);
    And(a=instruction[1], b=iszero, out=jzero);
    And(a=instruction[0], b=ispos, out=jpos);
    Or8Way(in[0]=jneg, in[1]=jzero, in[2]=jpos, out=j1);
    And(a=instruction[15], b=j1, out=j2);
    Not(in=j2, out=nj2);

    And(a=instruction[15], b=instruction[3], out=writeM);

    PC(in=aout, load=j2, inc=nj2, reset=reset, out[0..14]=pc);
}
